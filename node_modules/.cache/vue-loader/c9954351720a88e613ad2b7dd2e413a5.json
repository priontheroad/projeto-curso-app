{"remainingRequest":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/src/components/DetalhesAdicao/DetalhesAdicao.vue?vue&type=template&id=3cfcbfa2&","dependencies":[{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/src/components/DetalhesAdicao/DetalhesAdicao.vue","mtime":1678361197239},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}