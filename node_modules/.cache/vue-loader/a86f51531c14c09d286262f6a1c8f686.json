{"remainingRequest":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/src/components/PainelAdicoes/PainelAdicoes.vue?vue&type=template&id=1a97a357&","dependencies":[{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/src/components/PainelAdicoes/PainelAdicoes.vue","mtime":1678361197239},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/priscila_floriano/Documentos/diversos/rateio-importacao-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}