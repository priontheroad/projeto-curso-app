{"map":"{\"version\":3,\"sources\":[\"js/npm.v-currency-field.js\"],\"names\":[\"self\",\"this\",\"push\",\"./node_modules/v-currency-field/dist/v-currency-field.esm.js\",\"module\",\"__webpack_exports__\",\"__webpack_require__\",\"eval\"],\"mappings\":\"EAAkB,qBAATA,KAAuBA,KAAOC,MAAM,iBAAmC,qBAATD,KAAuBA,KAAOC,MAAM,iBAAmB,IAAIC,KAAK,CAAC,CAAC,wBAAwB,CAE3JC;;;;kEAKA,SAAUC,OAAQC,oBAAqBC,qBAE7C,aACAC,KAAK\"}","code":"((\"undefined\"!==typeof self?self:this)[\"webpackJsonp\"]=(\"undefined\"!==typeof self?self:this)[\"webpackJsonp\"]||[]).push([[\"npm.v-currency-field\"],{\"./node_modules/v-currency-field/dist/v-currency-field.esm.js\":\n/*!********************************************************************!*\\\n  !*** ./node_modules/v-currency-field/dist/v-currency-field.esm.js ***!\n  \\********************************************************************/\n/*! exports provided: default, VCurrencyField, options, version */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"VCurrencyField\\\", function() { return VCurrencyField; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"options\\\", function() { return options; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"version\\\", function() { return version; });\\n/*!\\n * v-currency-field v3.1.1 \\n * (c) 2020 Philipe Augusto <phiny1@gmail.com>\\n * Released under the MIT License.\\n */\\nfunction _typeof(obj) {\\n  \\\"@babel/helpers - typeof\\\";\\n\\n  if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") {\\n    _typeof = function (obj) {\\n      return typeof obj;\\n    };\\n  } else {\\n    _typeof = function (obj) {\\n      return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj;\\n    };\\n  }\\n\\n  return _typeof(obj);\\n}\\n\\nfunction _defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n}\\n\\nfunction ownKeys(object, enumerableOnly) {\\n  var keys = Object.keys(object);\\n\\n  if (Object.getOwnPropertySymbols) {\\n    var symbols = Object.getOwnPropertySymbols(object);\\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\\n    });\\n    keys.push.apply(keys, symbols);\\n  }\\n\\n  return keys;\\n}\\n\\nfunction _objectSpread2(target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i] != null ? arguments[i] : {};\\n\\n    if (i % 2) {\\n      ownKeys(Object(source), true).forEach(function (key) {\\n        _defineProperty(target, key, source[key]);\\n      });\\n    } else if (Object.getOwnPropertyDescriptors) {\\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\\n    } else {\\n      ownKeys(Object(source)).forEach(function (key) {\\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\\n      });\\n    }\\n  }\\n\\n  return target;\\n}\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) {\\n  if (source == null) return {};\\n  var target = {};\\n  var sourceKeys = Object.keys(source);\\n  var key, i;\\n\\n  for (i = 0; i < sourceKeys.length; i++) {\\n    key = sourceKeys[i];\\n    if (excluded.indexOf(key) >= 0) continue;\\n    target[key] = source[key];\\n  }\\n\\n  return target;\\n}\\n\\nfunction _objectWithoutProperties(source, excluded) {\\n  if (source == null) return {};\\n\\n  var target = _objectWithoutPropertiesLoose(source, excluded);\\n\\n  var key, i;\\n\\n  if (Object.getOwnPropertySymbols) {\\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\\n\\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\\n      key = sourceSymbolKeys[i];\\n      if (excluded.indexOf(key) >= 0) continue;\\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\\n      target[key] = source[key];\\n    }\\n  }\\n\\n  return target;\\n}\\n\\nvar dispatchEvent = (function (el, eventName, data) {\\n  var event = document.createEvent('CustomEvent');\\n  event.initCustomEvent(eventName, true, true, data);\\n  el.dispatchEvent(event);\\n});\\n\\n/**\\n * Sets the value of an input programmatically.\\n *\\n * @param {HTMLInputElement} el The input element the `v-currency` directive is bound to.\\n * @param {Number} value The number to be set.\\n */\\n\\nvar setValue = function setValue(el, value) {\\n  return dispatchEvent(el, 'format', {\\n    value: value\\n  });\\n};\\n\\n/**\\n * Vue Currency Input 1.21.0\\n * (c) 2018-2020 Matthias Stiller\\n * @license MIT\\n */\\nfunction dispatchEvent$1(el, eventName, data) {\\n  var event = document.createEvent('CustomEvent');\\n  event.initCustomEvent(eventName, true, true, data);\\n  el.dispatchEvent(event);\\n}\\n\\nvar toExternalNumberModel = function toExternalNumberModel(number, valueAsInteger, fractionDigits) {\\n  return valueAsInteger && number != null ? Number(number.toFixed(fractionDigits).split('.').join('')) : number;\\n};\\n\\nvar DEFAULT_OPTIONS = {\\n  locale: undefined,\\n  currency: 'EUR',\\n  valueAsInteger: false,\\n  distractionFree: true,\\n  precision: undefined,\\n  autoDecimalMode: false,\\n  valueRange: undefined,\\n  allowNegative: true\\n};\\n\\nvar getValue = function getValue(el) {\\n  var ref = el.$ci;\\n  var numberValue = ref.numberValue;\\n  var currencyFormat = ref.currencyFormat;\\n  var options = ref.options;\\n  return toExternalNumberModel(numberValue, options.valueAsInteger, currencyFormat.maximumFractionDigits);\\n};\\n\\nvar setValue$1 = function setValue(el, value) {\\n  return dispatchEvent$1(el, 'format', {\\n    value: value\\n  });\\n};\\n\\nvar escapeRegExp = function escapeRegExp(str) {\\n  return str.replace(/[.*+?^${}()|[\\\\]\\\\\\\\]/g, '\\\\\\\\$&');\\n};\\n\\nvar removeLeadingZeros = function removeLeadingZeros(str) {\\n  return str.replace(/^0+(0$|[^0])/, '$1');\\n};\\n\\nvar count = function count(str, search) {\\n  return (str.match(new RegExp(escapeRegExp(search), 'g')) || []).length;\\n};\\n\\nvar startsWith = function startsWith(str, search) {\\n  return str.substring(0, search.length) === search;\\n};\\n\\nvar substringBefore = function substringBefore(str, search) {\\n  return str.substring(0, str.indexOf(search));\\n};\\n\\nvar setCaretPosition = function setCaretPosition(el, position) {\\n  return el.setSelectionRange(position, position);\\n};\\n\\nvar getCaretPositionAfterFormat = function getCaretPositionAfterFormat(newValue, inputtedValue, caretPosition, numberFormat, options) {\\n  var prefix = numberFormat.prefix;\\n  var suffix = numberFormat.suffix;\\n  var decimalSymbol = numberFormat.decimalSymbol;\\n  var maximumFractionDigits = numberFormat.maximumFractionDigits;\\n  var groupingSymbol = numberFormat.groupingSymbol;\\n  var decimalSymbolPosition = inputtedValue.indexOf(decimalSymbol) + 1;\\n  var caretPositionFromLeft = inputtedValue.length - caretPosition;\\n\\n  if (Math.abs(newValue.length - inputtedValue.length) > 1 && caretPosition <= decimalSymbolPosition) {\\n    return newValue.indexOf(decimalSymbol) + 1;\\n  } else if (newValue.substr(caretPosition, 1) === groupingSymbol && count(newValue, groupingSymbol) === count(inputtedValue, groupingSymbol) + 1) {\\n    return newValue.length - caretPositionFromLeft - 1;\\n  } else {\\n    if (!options.autoDecimalMode && decimalSymbolPosition !== 0 && caretPosition > decimalSymbolPosition) {\\n      if (numberFormat.onlyDigits(inputtedValue.substr(decimalSymbolPosition)).length - 1 === maximumFractionDigits) {\\n        caretPositionFromLeft -= 1;\\n      }\\n    }\\n\\n    return options.distractionFree.hideCurrencySymbol ? newValue.length - caretPositionFromLeft : Math.max(newValue.length - Math.max(caretPositionFromLeft, suffix.length), prefix.length === 0 ? 0 : prefix.length + 1);\\n  }\\n};\\n\\nvar getDistractionFreeCaretPosition = function getDistractionFreeCaretPosition(numberFormat, options, value, caretPosition) {\\n  var result = caretPosition;\\n\\n  if (options.distractionFree.hideCurrencySymbol) {\\n    result -= numberFormat.prefix.length;\\n  }\\n\\n  if (options.distractionFree.hideGroupingSymbol) {\\n    result -= count(value.substring(0, caretPosition), numberFormat.groupingSymbol);\\n  }\\n\\n  return Math.max(0, result);\\n};\\n\\nvar equal = function equal(a, b) {\\n  if (a === b) {\\n    return true;\\n  }\\n\\n  if (!a || !b || _typeof(a) !== 'object' || _typeof(b) !== 'object') {\\n    return false;\\n  }\\n\\n  var keys = Object.keys(a);\\n\\n  if (keys.length !== Object.keys(b).length) {\\n    return false;\\n  }\\n\\n  if (!keys.every(Object.prototype.hasOwnProperty.bind(b))) {\\n    return false;\\n  }\\n\\n  return keys.every(function (key) {\\n    return equal(a[key], b[key]);\\n  });\\n};\\n\\nvar DECIMAL_SYMBOLS = [',', '.', 'Ù«'];\\n\\nvar NumberFormat = function NumberFormat(options) {\\n  var currency = options.currency;\\n  var locale = options.locale;\\n  var precision = options.precision;\\n  var autoDecimalMode = options.autoDecimalMode;\\n  var valueAsInteger = options.valueAsInteger;\\n  var numberFormat = new Intl.NumberFormat(locale, typeof currency === 'string' ? {\\n    currency: currency,\\n    style: 'currency'\\n  } : {\\n    minimumFractionDigits: 1\\n  });\\n  var ps = numberFormat.format(123456);\\n  this.locale = locale;\\n  this.currency = currency;\\n  this.digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(function (i) {\\n    return i.toLocaleString(locale);\\n  });\\n  this.decimalSymbol = count(ps, this.digits[0]) ? ps.substr(ps.indexOf(this.digits[6]) + 1, 1) : undefined;\\n  this.groupingSymbol = ps.substr(ps.indexOf(this.digits[3]) + 1, 1);\\n  this.minusSymbol = substringBefore(Number(-1).toLocaleString(locale), this.digits[1]);\\n\\n  if (this.decimalSymbol === undefined) {\\n    this.minimumFractionDigits = this.maximumFractionDigits = 0;\\n  } else if (typeof precision === 'number') {\\n    this.minimumFractionDigits = this.maximumFractionDigits = precision;\\n  } else if (_typeof(precision) === 'object' && !autoDecimalMode && !valueAsInteger) {\\n    this.minimumFractionDigits = precision.min || 0;\\n    this.maximumFractionDigits = precision.max !== undefined ? precision.max : 20;\\n  } else if (typeof currency === 'string') {\\n    this.minimumFractionDigits = numberFormat.resolvedOptions().minimumFractionDigits;\\n    this.maximumFractionDigits = numberFormat.resolvedOptions().maximumFractionDigits;\\n  } else {\\n    this.minimumFractionDigits = this.maximumFractionDigits = 2;\\n  }\\n\\n  if (typeof currency === 'string') {\\n    this.prefix = substringBefore(ps, this.digits[1]);\\n    this.negativePrefix = substringBefore(numberFormat.format(-1), this.digits[1]);\\n    this.suffix = ps.substring(ps.lastIndexOf(this.decimalSymbol ? this.digits[0] : this.digits[6]) + 1);\\n  } else {\\n    this.prefix = (currency || {}).prefix || '';\\n    this.negativePrefix = \\\"\\\" + this.minusSymbol + this.prefix;\\n    this.suffix = (currency || {}).suffix || '';\\n  }\\n};\\n\\nNumberFormat.prototype.parse = function parse(str) {\\n  var negative = this.isNegative(str);\\n  str = this.normalizeDigits(str);\\n  str = this.stripCurrencySymbol(str);\\n  str = this.stripMinusSymbol(str);\\n  var fraction = this.decimalSymbol ? \\\"(\\\" + escapeRegExp(this.decimalSymbol) + \\\"\\\\\\\\d*)?\\\" : '';\\n  var match = str.match(new RegExp(\\\"^\\\" + this.integerPattern() + fraction + \\\"$\\\"));\\n\\n  if (match) {\\n    return Number(\\\"\\\" + (negative ? '-' : '') + this.onlyDigits(match[1]) + \\\".\\\" + this.onlyDigits(match[3] || ''));\\n  }\\n\\n  return null;\\n};\\n\\nNumberFormat.prototype.format = function format(number, options) {\\n  if (options === void 0) options = {\\n    minimumFractionDigits: this.minimumFractionDigits,\\n    maximumFractionDigits: this.maximumFractionDigits\\n  };\\n\\n  if (typeof this.currency === 'string') {\\n    return number.toLocaleString(this.locale, Object.assign({}, {\\n      style: 'currency',\\n      currency: this.currency\\n    }, options));\\n  } else {\\n    return this.insertCurrencySymbol(Math.abs(number).toLocaleString(this.locale, options), number < 0 || number === 0 && 1 / number < 0);\\n  }\\n};\\n\\nNumberFormat.prototype.integerPattern = function integerPattern() {\\n  return \\\"(0|[1-9]\\\\\\\\d{0,2}(\\\" + escapeRegExp(this.groupingSymbol) + \\\"?\\\\\\\\d{3})*)\\\";\\n};\\n\\nNumberFormat.prototype.toFraction = function toFraction(str) {\\n  return \\\"\\\" + this.digits[0] + this.decimalSymbol + this.onlyLocaleDigits(str.substr(1)).substr(0, this.maximumFractionDigits);\\n};\\n\\nNumberFormat.prototype.isFractionIncomplete = function isFractionIncomplete(str) {\\n  return !!this.normalizeDigits(str).match(new RegExp(\\\"^\\\" + this.integerPattern() + escapeRegExp(this.decimalSymbol) + \\\"$\\\"));\\n};\\n\\nNumberFormat.prototype.isNegative = function isNegative(str) {\\n  return startsWith(str, this.negativePrefix) || startsWith(str.replace('-', this.minusSymbol), this.minusSymbol);\\n};\\n\\nNumberFormat.prototype.insertCurrencySymbol = function insertCurrencySymbol(str, negative) {\\n  return \\\"\\\" + (negative ? this.negativePrefix : this.prefix) + str + this.suffix;\\n};\\n\\nNumberFormat.prototype.stripMinusSymbol = function stripMinusSymbol(str) {\\n  return str.replace('-', this.minusSymbol).replace(this.minusSymbol, '');\\n};\\n\\nNumberFormat.prototype.stripCurrencySymbol = function stripCurrencySymbol(str) {\\n  return str.replace(this.negativePrefix, '').replace(this.prefix, '').replace(this.suffix, '');\\n};\\n\\nNumberFormat.prototype.normalizeDecimalSymbol = function normalizeDecimalSymbol(str, from) {\\n  var this$1 = this;\\n  DECIMAL_SYMBOLS.forEach(function (s) {\\n    str = str.substr(0, from) + str.substr(from).replace(s, this$1.decimalSymbol);\\n  });\\n  return str;\\n};\\n\\nNumberFormat.prototype.normalizeDigits = function normalizeDigits(str) {\\n  if (this.digits[0] !== '0') {\\n    this.digits.forEach(function (digit, index) {\\n      str = str.replace(new RegExp(digit, 'g'), index);\\n    });\\n  }\\n\\n  return str;\\n};\\n\\nNumberFormat.prototype.onlyDigits = function onlyDigits(str) {\\n  return this.normalizeDigits(str).replace(/\\\\D+/g, '');\\n};\\n\\nNumberFormat.prototype.onlyLocaleDigits = function onlyLocaleDigits(str) {\\n  return str.replace(new RegExp(\\\"[^\\\" + this.digits.join('') + \\\"]*\\\", 'g'), '');\\n};\\n\\nvar DefaultNumberMask = function DefaultNumberMask(numberFormat) {\\n  this.numberFormat = numberFormat;\\n};\\n\\nDefaultNumberMask.prototype.conformToMask = function conformToMask(str, previousConformedValue) {\\n  var this$1 = this;\\n  if (previousConformedValue === void 0) previousConformedValue = '';\\n  var negative = this.numberFormat.isNegative(str);\\n\\n  var checkIncompleteValue = function checkIncompleteValue(str) {\\n    if (str === '' && negative && previousConformedValue !== this$1.numberFormat.negativePrefix) {\\n      return '';\\n    } else if (this$1.numberFormat.maximumFractionDigits > 0) {\\n      if (this$1.numberFormat.isFractionIncomplete(str)) {\\n        return str;\\n      } else if (startsWith(str, this$1.numberFormat.decimalSymbol)) {\\n        return this$1.numberFormat.toFraction(str);\\n      }\\n    }\\n\\n    return null;\\n  };\\n\\n  var value = str;\\n  value = this.numberFormat.stripCurrencySymbol(value);\\n  value = this.numberFormat.stripMinusSymbol(value);\\n  var incompleteValue = checkIncompleteValue(value);\\n\\n  if (incompleteValue != null) {\\n    return this.numberFormat.insertCurrencySymbol(incompleteValue, negative);\\n  }\\n\\n  var ref = value.split(this.numberFormat.decimalSymbol);\\n  var integer = ref[0];\\n  var fraction = ref.slice(1);\\n  var integerDigits = removeLeadingZeros(this.numberFormat.onlyDigits(integer));\\n  var fractionDigits = this.numberFormat.onlyDigits(fraction.join('')).substr(0, this.numberFormat.maximumFractionDigits);\\n  var invalidFraction = fraction.length > 0 && fractionDigits.length === 0;\\n  var invalidNegativeValue = integerDigits === '' && negative && (previousConformedValue === str.slice(0, -1) || previousConformedValue !== this.numberFormat.negativePrefix);\\n\\n  if (invalidFraction || invalidNegativeValue) {\\n    return previousConformedValue;\\n  } else if (integerDigits.match(/\\\\d+/)) {\\n    return {\\n      numberValue: Number(\\\"\\\" + (negative ? '-' : '') + integerDigits + \\\".\\\" + fractionDigits),\\n      fractionDigits: fractionDigits\\n    };\\n  } else {\\n    return '';\\n  }\\n};\\n\\nvar AutoDecimalModeNumberMask = function AutoDecimalModeNumberMask(numberFormat) {\\n  this.numberFormat = numberFormat;\\n};\\n\\nAutoDecimalModeNumberMask.prototype.conformToMask = function conformToMask(str) {\\n  if (str === '') {\\n    return '';\\n  }\\n\\n  var negative = this.numberFormat.isNegative(str);\\n  var numberValue = this.numberFormat.stripMinusSymbol(str) === '' ? -0 : Number(\\\"\\\" + (negative ? '-' : '') + removeLeadingZeros(this.numberFormat.onlyDigits(str))) / Math.pow(10, this.numberFormat.minimumFractionDigits);\\n  return {\\n    numberValue: numberValue,\\n    fractionDigits: numberValue.toFixed(this.numberFormat.minimumFractionDigits).slice(-this.numberFormat.minimumFractionDigits)\\n  };\\n};\\n\\nvar MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;\\n\\nvar init = function init(el, optionsFromBinding, ref) {\\n  var $ci = ref.$ci;\\n  var inputElement = el.tagName.toLowerCase() === 'input' ? el : el.querySelector('input');\\n\\n  if (!inputElement) {\\n    throw new Error('No input element found');\\n  }\\n\\n  var options = Object.assign({}, $ci ? $ci.GLOBAL_OPTIONS : DEFAULT_OPTIONS, optionsFromBinding);\\n  var distractionFree = options.distractionFree;\\n  var autoDecimalMode = options.autoDecimalMode;\\n  var valueRange = options.valueRange;\\n\\n  if (typeof distractionFree === 'boolean') {\\n    options.distractionFree = {\\n      hideCurrencySymbol: distractionFree,\\n      hideNegligibleDecimalDigits: distractionFree,\\n      hideGroupingSymbol: distractionFree\\n    };\\n  }\\n\\n  if (valueRange) {\\n    options.valueRange = {\\n      min: valueRange.min !== undefined ? Math.max(valueRange.min, -MAX_SAFE_INTEGER) : -MAX_SAFE_INTEGER,\\n      max: valueRange.max !== undefined ? Math.min(valueRange.max, MAX_SAFE_INTEGER) : MAX_SAFE_INTEGER\\n    };\\n  } else {\\n    options.valueRange = {\\n      min: -MAX_SAFE_INTEGER,\\n      max: MAX_SAFE_INTEGER\\n    };\\n  }\\n\\n  if (autoDecimalMode) {\\n    options.distractionFree.hideNegligibleDecimalDigits = false;\\n    inputElement.setAttribute('inputmode', 'numeric');\\n  } else {\\n    inputElement.setAttribute('inputmode', 'decimal');\\n  }\\n\\n  var currencyFormat = new NumberFormat(options);\\n  inputElement.$ci = Object.assign({}, inputElement.$ci || {\\n    numberValue: null\\n  }, {\\n    options: options,\\n    numberMask: options.autoDecimalMode ? new AutoDecimalModeNumberMask(currencyFormat) : new DefaultNumberMask(currencyFormat),\\n    currencyFormat: currencyFormat\\n  });\\n  return inputElement;\\n};\\n\\nvar triggerEvent = function triggerEvent(el, eventName) {\\n  var ref = el.$ci;\\n  var numberValue = ref.numberValue;\\n  var currencyFormat = ref.currencyFormat;\\n  var options = ref.options;\\n  numberValue = toExternalNumberModel(numberValue, options.valueAsInteger, currencyFormat.maximumFractionDigits);\\n  dispatchEvent$1(el, eventName, {\\n    numberValue: numberValue\\n  });\\n};\\n\\nvar applyFixedFractionFormat = function applyFixedFractionFormat(el, value, forcedChange) {\\n  if (forcedChange === void 0) forcedChange = false;\\n  var ref = el.$ci;\\n  var currencyFormat = ref.currencyFormat;\\n  var options = ref.options;\\n  var ref$1 = options.valueRange;\\n  var min = ref$1.min;\\n  var max = ref$1.max;\\n\\n  var validateValueRange = function validateValueRange() {\\n    return Math.min(Math.max(value, min), max);\\n  };\\n\\n  format(el, value != null ? currencyFormat.format(validateValueRange()) : null);\\n\\n  if (value !== el.$ci.numberValue || forcedChange) {\\n    triggerEvent(el, 'change');\\n  }\\n};\\n\\nvar updateInputValue = function updateInputValue(el, value, hideNegligibleDecimalDigits) {\\n  if (value != null) {\\n    var ref = el.$ci;\\n    var focus = ref.focus;\\n    var decimalSymbolInsertedAt = ref.decimalSymbolInsertedAt;\\n    var options = ref.options;\\n    var numberMask = ref.numberMask;\\n    var currencyFormat = ref.currencyFormat;\\n    var previousConformedValue = ref.previousConformedValue;\\n    var allowNegative = options.allowNegative;\\n    var distractionFree = options.distractionFree;\\n\\n    if (decimalSymbolInsertedAt !== undefined) {\\n      value = currencyFormat.normalizeDecimalSymbol(value, decimalSymbolInsertedAt);\\n      el.$ci.decimalSymbolInsertedAt = undefined;\\n    }\\n\\n    var conformedValue = numberMask.conformToMask(value, previousConformedValue);\\n    var formattedValue;\\n\\n    if (_typeof(conformedValue) === 'object') {\\n      var numberValue = conformedValue.numberValue;\\n      var fractionDigits = conformedValue.fractionDigits;\\n      var maximumFractionDigits = currencyFormat.maximumFractionDigits;\\n      var minimumFractionDigits = currencyFormat.minimumFractionDigits;\\n\\n      if (focus) {\\n        minimumFractionDigits = maximumFractionDigits;\\n      }\\n\\n      minimumFractionDigits = hideNegligibleDecimalDigits ? fractionDigits.replace(/0+$/, '').length : Math.min(minimumFractionDigits, fractionDigits.length);\\n      formattedValue = numberValue > MAX_SAFE_INTEGER ? previousConformedValue : currencyFormat.format(numberValue, {\\n        useGrouping: !(focus && distractionFree.hideGroupingSymbol),\\n        minimumFractionDigits: minimumFractionDigits,\\n        maximumFractionDigits: maximumFractionDigits\\n      });\\n    } else {\\n      formattedValue = conformedValue;\\n    }\\n\\n    if (!allowNegative) {\\n      formattedValue = formattedValue.replace(currencyFormat.negativePrefix, currencyFormat.prefix);\\n    }\\n\\n    if (focus && distractionFree.hideCurrencySymbol) {\\n      formattedValue = formattedValue.replace(currencyFormat.negativePrefix, currencyFormat.minusSymbol).replace(currencyFormat.prefix, '').replace(currencyFormat.suffix, '');\\n    }\\n\\n    el.value = formattedValue;\\n    el.$ci.numberValue = currencyFormat.parse(el.value);\\n  } else {\\n    el.value = el.$ci.numberValue = null;\\n  }\\n\\n  el.$ci.previousConformedValue = el.value;\\n};\\n\\nvar format = function format(el, value, hideNegligibleDecimalDigits) {\\n  if (hideNegligibleDecimalDigits === void 0) hideNegligibleDecimalDigits = false;\\n  updateInputValue(el, value, hideNegligibleDecimalDigits);\\n  triggerEvent(el, 'input');\\n};\\n\\nvar addEventListener = function addEventListener(el) {\\n  el.addEventListener('input', function (e) {\\n    if (!e.detail) {\\n      var value = el.value;\\n      var selectionStart = el.selectionStart;\\n      var el_$ci = el.$ci;\\n      var currencyFormat = el_$ci.currencyFormat;\\n      var options = el_$ci.options;\\n      format(el, value);\\n\\n      if (el.$ci.focus) {\\n        setCaretPosition(el, getCaretPositionAfterFormat(el.value, value, selectionStart, currencyFormat, options));\\n      }\\n    }\\n  }, {\\n    capture: true\\n  });\\n  el.addEventListener('keypress', function (e) {\\n    if (DECIMAL_SYMBOLS.includes(e.key)) {\\n      el.$ci.decimalSymbolInsertedAt = el.selectionStart;\\n    }\\n  });\\n  el.addEventListener('format', function (e) {\\n    var ref = el.$ci;\\n    var currencyFormat = ref.currencyFormat;\\n    var options = ref.options;\\n    var numberValue = ref.numberValue;\\n\\n    var toInternalNumberModel = function toInternalNumberModel(n) {\\n      return options.valueAsInteger && n != null ? n / Math.pow(10, currencyFormat.maximumFractionDigits) : n;\\n    };\\n\\n    var newValue = toInternalNumberModel(e.detail.value);\\n\\n    if (numberValue !== newValue) {\\n      applyFixedFractionFormat(el, newValue);\\n    }\\n  });\\n  el.addEventListener('focus', function () {\\n    el.$ci.focus = true;\\n    var ref = el.$ci.options.distractionFree;\\n    var hideCurrencySymbol = ref.hideCurrencySymbol;\\n    var hideGroupingSymbol = ref.hideGroupingSymbol;\\n    var hideNegligibleDecimalDigits = ref.hideNegligibleDecimalDigits;\\n\\n    if (hideCurrencySymbol || hideGroupingSymbol || hideNegligibleDecimalDigits) {\\n      setTimeout(function () {\\n        var value = el.value;\\n        var selectionStart = el.selectionStart;\\n        var selectionEnd = el.selectionEnd;\\n\\n        if (value) {\\n          format(el, value, hideNegligibleDecimalDigits);\\n        }\\n\\n        if (Math.abs(selectionStart - selectionEnd) > 0) {\\n          el.setSelectionRange(0, el.value.length);\\n        } else {\\n          setCaretPosition(el, getDistractionFreeCaretPosition(el.$ci.currencyFormat, el.$ci.options, value, selectionStart));\\n        }\\n      });\\n    }\\n  });\\n  el.addEventListener('blur', function () {\\n    el.$ci.focus = false;\\n\\n    if (el.$ci.numberValue != null) {\\n      applyFixedFractionFormat(el, el.$ci.numberValue);\\n    }\\n  });\\n  el.addEventListener('change', function (e) {\\n    if (!e.detail) {\\n      triggerEvent(el, 'change');\\n    }\\n  });\\n};\\n\\nvar directive = {\\n  bind: function bind(el, ref, ref$1) {\\n    var value = ref.value;\\n    var context = ref$1.context;\\n    var inputElement = init(el, value, context);\\n    addEventListener(inputElement);\\n    setValue$1(inputElement, inputElement.$ci.currencyFormat.parse(inputElement.value));\\n  },\\n  componentUpdated: function componentUpdated(el, ref, ref$1) {\\n    var value = ref.value;\\n    var oldValue = ref.oldValue;\\n    var context = ref$1.context;\\n\\n    if (!equal(value, oldValue)) {\\n      var inputElement = init(el, value, context);\\n      applyFixedFractionFormat(inputElement, inputElement.$ci.numberValue, true);\\n    }\\n  }\\n};\\nvar component = {\\n  render: function render(h) {\\n    var this$1 = this;\\n    return h('input', {\\n      directives: [{\\n        name: 'currency',\\n        value: this.options\\n      }],\\n      on: Object.assign({}, this.$listeners, {\\n        change: function change(e) {\\n          if (e.detail) {\\n            this$1.$emit('change', e.detail.numberValue);\\n          }\\n        },\\n        input: function input(e) {\\n          if (e.detail && this$1.value !== e.detail.numberValue) {\\n            this$1.$emit('input', e.detail.numberValue);\\n          }\\n        }\\n      })\\n    });\\n  },\\n  directives: {\\n    currency: directive\\n  },\\n  name: 'CurrencyInput',\\n  props: {\\n    value: {\\n      type: Number,\\n      default: null\\n    },\\n    locale: {\\n      type: String,\\n      default: undefined\\n    },\\n    currency: {\\n      type: [String, Object],\\n      default: undefined\\n    },\\n    distractionFree: {\\n      type: [Boolean, Object],\\n      default: undefined\\n    },\\n    precision: {\\n      type: [Number, Object],\\n      default: undefined\\n    },\\n    autoDecimalMode: {\\n      type: Boolean,\\n      default: undefined\\n    },\\n    valueAsInteger: {\\n      type: Boolean,\\n      default: undefined\\n    },\\n    valueRange: {\\n      type: Object,\\n      default: undefined\\n    },\\n    allowNegative: {\\n      type: Boolean,\\n      default: undefined\\n    }\\n  },\\n  mounted: function mounted() {\\n    this.setValue(this.value);\\n  },\\n  computed: {\\n    options: function options() {\\n      var this$1 = this;\\n      var options = Object.assign({}, this.$ci ? this.$ci.GLOBAL_OPTIONS : DEFAULT_OPTIONS);\\n      Object.keys(DEFAULT_OPTIONS).forEach(function (key) {\\n        if (this$1[key] !== undefined) {\\n          options[key] = this$1[key];\\n        }\\n      });\\n      return options;\\n    }\\n  },\\n  watch: {\\n    value: 'setValue'\\n  },\\n  methods: {\\n    setValue: function setValue$1$1(value) {\\n      setValue$1(this.$el, value);\\n    }\\n  }\\n};\\nvar plugin = {\\n  install: function install(Vue, ref) {\\n    if (ref === void 0) ref = {};\\n    var componentName = ref.componentName;\\n    if (componentName === void 0) componentName = component.name;\\n    var directiveName = ref.directiveName;\\n    if (directiveName === void 0) directiveName = 'currency';\\n    var globalOptions = ref.globalOptions;\\n    if (globalOptions === void 0) globalOptions = {};\\n    Vue.component(componentName, component);\\n    Vue.directive(directiveName, directive);\\n    Vue.prototype.$ci = {\\n      getValue: getValue,\\n      setValue: setValue$1,\\n      GLOBAL_OPTIONS: Object.assign({}, DEFAULT_OPTIONS, globalOptions)\\n    };\\n  }\\n};\\n\\nif (typeof window !== 'undefined' && window.Vue) {\\n  window.Vue.use(plugin);\\n}\\n\\nvar options = {\\n  locale: undefined,\\n  currency: undefined,\\n  decimalLength: 2,\\n  autoDecimalMode: true,\\n  min: null,\\n  max: null,\\n  defaultValue: 0,\\n  valueAsInteger: false,\\n  allowNegative: true\\n};\\n\\nvar script = {\\n  name: 'VCurrencyField',\\n  props: {\\n    value: {\\n      type: [Number, String],\\n      default: function _default() {\\n        return 0;\\n      }\\n    },\\n    locale: {\\n      type: String,\\n      default: function _default() {\\n        return options.locale;\\n      }\\n    },\\n    currency: {\\n      type: [String, Object],\\n      default: function _default() {\\n        return options.currency;\\n      }\\n    },\\n    decimalLength: {\\n      type: [Number, Object],\\n      default: function _default() {\\n        return options.decimalLength;\\n      }\\n    },\\n    autoDecimalMode: {\\n      type: Boolean,\\n      default: function _default() {\\n        return options.autoDecimalMode;\\n      }\\n    },\\n    min: {\\n      type: Number,\\n      default: function _default() {\\n        return options.min;\\n      }\\n    },\\n    max: {\\n      type: Number,\\n      default: function _default() {\\n        return options.max;\\n      }\\n    },\\n    defaultValue: {\\n      type: Number,\\n      default: function _default() {\\n        return options.defaultValue;\\n      }\\n    },\\n    valueAsInteger: {\\n      type: Boolean,\\n      default: function _default() {\\n        return options.valueAsInteger;\\n      }\\n    },\\n    allowNegative: {\\n      type: Boolean,\\n      default: function _default() {\\n        return options.allowNegative;\\n      }\\n    }\\n  },\\n  directives: {\\n    CurrencyDirective: directive\\n  },\\n  data: function data() {\\n    return {\\n      formattedValue: this.value\\n    };\\n  },\\n  mounted: function mounted() {\\n    this.addListeners(this.$el.querySelector('input'));\\n  },\\n  computed: {\\n    attrs: function attrs() {\\n      // eslint-disable-next-line\\n      var _this$$attrs = this.$attrs,\\n          value = _this$$attrs.value,\\n          attrs = _objectWithoutProperties(_this$$attrs, [\\\"value\\\"]); // all but input event\\n\\n\\n      return attrs;\\n    },\\n    distractionFree: function distractionFree() {\\n      if (this.decimalLength > 0) {\\n        return !this.autoDecimalMode;\\n      } else {\\n        return false;\\n      }\\n    },\\n    decimalMode: function decimalMode() {\\n      if (this.decimalLength > 0) {\\n        return this.autoDecimalMode;\\n      } else {\\n        return false;\\n      }\\n    },\\n    valueRange: function valueRange() {\\n      if (this.min || this.max) {\\n        return {\\n          min: this.min,\\n          max: this.max\\n        };\\n      } else {\\n        return undefined;\\n      }\\n    }\\n  },\\n  watch: {\\n    value: 'setValue'\\n  },\\n  methods: {\\n    addListeners: function addListeners(el) {\\n      var _this = this;\\n\\n      el.addEventListener('change', function (e) {\\n        if (e.detail) {\\n          _this.$emit('change', e.detail.numberValue);\\n        }\\n\\n        if (_this.value == null && _this.value == undefined && _this.defaultValue !== null && _this.defaultValue !== undefined) {\\n          _this.setValue(_this.valueAsInteger && _this.defaultValue ? _this.defaultValue * Math.pow(10, _this.decimalLength) : _this.defaultValue);\\n        }\\n      }, {\\n        capture: true\\n      });\\n      el.addEventListener('input', function (e) {\\n        if (e.detail && _this.value !== e.detail.numberValue) {\\n          _this.$emit('input', e.detail.numberValue);\\n        }\\n      }, {\\n        capture: true\\n      });\\n    },\\n    setValue: function setValue$1(value) {\\n      var input = this.$el.querySelector('input');\\n\\n      setValue(input, value);\\n    },\\n    listeners: function listeners() {\\n      var _this2 = this;\\n\\n      // eslint-disable-next-line\\n      var _this$$listeners = this.$listeners,\\n          input = _this$$listeners.input,\\n          _keyup = _this$$listeners.keyup,\\n          listeners = _objectWithoutProperties(_this$$listeners, [\\\"input\\\", \\\"keyup\\\"]); // all but input event\\n\\n\\n      return _objectSpread2(_objectSpread2({}, listeners), {}, {\\n        input: function input(value) {\\n          if (_this2.$refs.textfield.isResetting || value == null) {\\n            _this2.setValue(_this2.valueAsInteger && _this2.defaultValue ? _this2.defaultValue * Math.pow(10, _this2.decimalLength) : _this2.defaultValue);\\n          }\\n        },\\n        'keyup': function keyup(event) {\\n          if (event.key === '-' || event.key === '+') {\\n            if (_this2.value != null && event.key === '-' && _this2.value >= 0) {\\n              _this2.setValue(_this2.value * -1);\\n            }\\n\\n            if (_this2.value != null && event.key === '+' && _this2.value <= 0) {\\n              _this2.setValue(_this2.value * -1);\\n            }\\n          }\\n\\n          if (_keyup) {\\n            _keyup();\\n          }\\n        }\\n      });\\n    }\\n  }\\n};\\n\\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\\n/* server only */\\n, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\\n  if (typeof shadowMode !== 'boolean') {\\n    createInjectorSSR = createInjector;\\n    createInjector = shadowMode;\\n    shadowMode = false;\\n  } // Vue.extend constructor export interop.\\n\\n\\n  var options = typeof script === 'function' ? script.options : script; // render functions\\n\\n  if (template && template.render) {\\n    options.render = template.render;\\n    options.staticRenderFns = template.staticRenderFns;\\n    options._compiled = true; // functional template\\n\\n    if (isFunctionalTemplate) {\\n      options.functional = true;\\n    }\\n  } // scopedId\\n\\n\\n  if (scopeId) {\\n    options._scopeId = scopeId;\\n  }\\n\\n  var hook;\\n\\n  if (moduleIdentifier) {\\n    // server build\\n    hook = function hook(context) {\\n      // 2.3 injection\\n      context = context || // cached call\\n      this.$vnode && this.$vnode.ssrContext || // stateful\\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\\n      // 2.2 with runInNewContext: true\\n\\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\\n        context = __VUE_SSR_CONTEXT__;\\n      } // inject component styles\\n\\n\\n      if (style) {\\n        style.call(this, createInjectorSSR(context));\\n      } // register component module identifier for async chunk inference\\n\\n\\n      if (context && context._registeredComponents) {\\n        context._registeredComponents.add(moduleIdentifier);\\n      }\\n    }; // used by ssr in case component is cached and beforeCreate\\n    // never gets called\\n\\n\\n    options._ssrRegister = hook;\\n  } else if (style) {\\n    hook = shadowMode ? function () {\\n      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\\n    } : function (context) {\\n      style.call(this, createInjector(context));\\n    };\\n  }\\n\\n  if (hook) {\\n    if (options.functional) {\\n      // register for functional component in vue file\\n      var originalRender = options.render;\\n\\n      options.render = function renderWithStyleInjection(h, context) {\\n        hook.call(context);\\n        return originalRender(h, context);\\n      };\\n    } else {\\n      // inject component registration as beforeCreate hook\\n      var existing = options.beforeCreate;\\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\\n    }\\n  }\\n\\n  return script;\\n}\\n\\nvar normalizeComponent_1 = normalizeComponent;\\n\\n/* script */\\nconst __vue_script__ = script;\\n\\n/* template */\\nvar __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-text-field',_vm._g(_vm._b({directives:[{name:\\\"currency-directive\\\",rawName:\\\"v-currency-directive\\\",value:({currency: _vm.currency, locale: _vm.locale, distractionFree: _vm.distractionFree, precision: _vm.decimalLength, autoDecimalMode: _vm.decimalMode, valueRange: _vm.valueRange, allowNegative: _vm.allowNegative, valueAsInteger: _vm.valueAsInteger}),expression:\\\"{currency, locale, distractionFree, precision: decimalLength, autoDecimalMode: decimalMode, valueRange, allowNegative, valueAsInteger}\\\"}],ref:\\\"textfield\\\",attrs:{\\\"type\\\":\\\"text\\\"},scopedSlots:_vm._u([_vm._l((_vm.$slots),function(index,name){return {key:name,fn:function(){return [_vm._t(name)]},proxy:true}})],null,true),model:{value:(_vm.formattedValue),callback:function ($$v) {_vm.formattedValue=$$v;},expression:\\\"formattedValue\\\"}},'v-text-field',_vm.attrs,false),_vm.listeners()))};\\nvar __vue_staticRenderFns__ = [];\\n\\n  /* style */\\n  const __vue_inject_styles__ = undefined;\\n  /* scoped */\\n  const __vue_scope_id__ = undefined;\\n  /* module identifier */\\n  const __vue_module_identifier__ = undefined;\\n  /* functional template */\\n  const __vue_is_functional_template__ = false;\\n  /* style inject */\\n  \\n  /* style inject SSR */\\n  \\n\\n  \\n  var VCurrencyField = normalizeComponent_1(\\n    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },\\n    __vue_inject_styles__,\\n    __vue_script__,\\n    __vue_scope_id__,\\n    __vue_is_functional_template__,\\n    __vue_module_identifier__,\\n    undefined,\\n    undefined\\n  );\\n\\nvar version = '3.1.1';\\n\\nfunction install(Vue, globalOptions) {\\n  if (globalOptions) {\\n    Object.keys(globalOptions).map(function (key) {\\n      options[key] = globalOptions[key];\\n    });\\n  }\\n\\n  Vue.component('v-currency-field', VCurrencyField);\\n}\\n\\nif (typeof window !== 'undefined' && window.Vue) {\\n  window.Vue.use(install);\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (install);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/v-currency-field/dist/v-currency-field.esm.js\\n\")}}]);","extractedComments":[]}