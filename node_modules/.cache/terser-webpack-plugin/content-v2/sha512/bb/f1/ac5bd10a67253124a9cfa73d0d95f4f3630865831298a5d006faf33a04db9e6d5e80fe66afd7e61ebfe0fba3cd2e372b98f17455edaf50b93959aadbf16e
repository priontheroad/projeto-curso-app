{"map":"{\"version\":3,\"sources\":[\"js/npm.v-mask.js\"],\"names\":[\"self\",\"this\",\"push\",\"./node_modules/v-mask/dist/v-mask.esm.js\",\"module\",\"__webpack_exports__\",\"__webpack_require__\",\"eval\"],\"mappings\":\"EAAkB,qBAATA,KAAuBA,KAAOC,MAAM,iBAAmC,qBAATD,KAAuBA,KAAOC,MAAM,iBAAmB,IAAIC,KAAK,CAAC,CAAC,cAAc,CAEjJC;;;;gFAKA,SAAUC,OAAQC,oBAAqBC,qBAE7C,aACAC,KAAK\"}","code":"((\"undefined\"!==typeof self?self:this)[\"webpackJsonp\"]=(\"undefined\"!==typeof self?self:this)[\"webpackJsonp\"]||[]).push([[\"npm.v-mask\"],{\"./node_modules/v-mask/dist/v-mask.esm.js\":\n/*!************************************************!*\\\n  !*** ./node_modules/v-mask/dist/v-mask.esm.js ***!\n  \\************************************************/\n/*! exports provided: VueMaskDirective, VueMaskFilter, VueMaskPlugin, default */function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"VueMaskDirective\\\", function() { return directive; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"VueMaskFilter\\\", function() { return filter; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"VueMaskPlugin\\\", function() { return plugin; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return plugin; });\\nfunction ownKeys(object, enumerableOnly) {\\n  var keys = Object.keys(object);\\n\\n  if (Object.getOwnPropertySymbols) {\\n    var symbols = Object.getOwnPropertySymbols(object);\\n\\n    if (enumerableOnly) {\\n      symbols = symbols.filter(function (sym) {\\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\\n      });\\n    }\\n\\n    keys.push.apply(keys, symbols);\\n  }\\n\\n  return keys;\\n}\\n\\nfunction _objectSpread2(target) {\\n  for (var i = 1; i < arguments.length; i++) {\\n    var source = arguments[i] != null ? arguments[i] : {};\\n\\n    if (i % 2) {\\n      ownKeys(Object(source), true).forEach(function (key) {\\n        _defineProperty(target, key, source[key]);\\n      });\\n    } else if (Object.getOwnPropertyDescriptors) {\\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\\n    } else {\\n      ownKeys(Object(source)).forEach(function (key) {\\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\\n      });\\n    }\\n  }\\n\\n  return target;\\n}\\n\\nfunction _typeof(obj) {\\n  \\\"@babel/helpers - typeof\\\";\\n\\n  if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") {\\n    _typeof = function (obj) {\\n      return typeof obj;\\n    };\\n  } else {\\n    _typeof = function (obj) {\\n      return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj;\\n    };\\n  }\\n\\n  return _typeof(obj);\\n}\\n\\nfunction _defineProperty(obj, key, value) {\\n  if (key in obj) {\\n    Object.defineProperty(obj, key, {\\n      value: value,\\n      enumerable: true,\\n      configurable: true,\\n      writable: true\\n    });\\n  } else {\\n    obj[key] = value;\\n  }\\n\\n  return obj;\\n}\\n\\nvar placeholderChar = '_';\\nvar strFunction = 'function';\\n\\nvar emptyArray$1 = [];\\nfunction convertMaskToPlaceholder() {\\n  var mask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyArray$1;\\n  var placeholderChar$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : placeholderChar;\\n\\n  if (!isArray(mask)) {\\n    throw new Error('Text-mask:convertMaskToPlaceholder; The mask property must be an array.');\\n  }\\n\\n  if (mask.indexOf(placeholderChar$1) !== -1) {\\n    throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' + 'that is not present in your mask as your placeholder character.\\\\n\\\\n' + \\\"The placeholder character that was received is: \\\".concat(JSON.stringify(placeholderChar$1), \\\"\\\\n\\\\n\\\") + \\\"The mask that was received is: \\\".concat(JSON.stringify(mask)));\\n  }\\n\\n  return mask.map(function (char) {\\n    return char instanceof RegExp ? placeholderChar$1 : char;\\n  }).join('');\\n}\\nfunction isArray(value) {\\n  return Array.isArray && Array.isArray(value) || value instanceof Array;\\n}\\nvar strCaretTrap = '[]';\\nfunction processCaretTraps(mask) {\\n  var indexes = [];\\n  var indexOfCaretTrap;\\n\\n  while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) {\\n    indexes.push(indexOfCaretTrap);\\n    mask.splice(indexOfCaretTrap, 1);\\n  }\\n\\n  return {\\n    maskWithoutCaretTraps: mask,\\n    indexes: indexes\\n  };\\n}\\n\\nvar emptyArray = [];\\nvar emptyString = '';\\nfunction conformToMask() {\\n  var rawValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyString;\\n  var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyArray;\\n  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\\n\\n  if (!isArray(mask)) {\\n    if (_typeof(mask) === strFunction) {\\n      mask = mask(rawValue, config);\\n      mask = processCaretTraps(mask).maskWithoutCaretTraps;\\n    } else {\\n      throw new Error('Text-mask:conformToMask; The mask property must be an array.');\\n    }\\n  }\\n\\n  var _config$guide = config.guide,\\n      guide = _config$guide === void 0 ? true : _config$guide,\\n      _config$previousConfo = config.previousConformedValue,\\n      previousConformedValue = _config$previousConfo === void 0 ? emptyString : _config$previousConfo,\\n      _config$placeholderCh = config.placeholderChar,\\n      placeholderChar$1 = _config$placeholderCh === void 0 ? placeholderChar : _config$placeholderCh,\\n      _config$placeholder = config.placeholder,\\n      placeholder = _config$placeholder === void 0 ? convertMaskToPlaceholder(mask, placeholderChar$1) : _config$placeholder,\\n      currentCaretPosition = config.currentCaretPosition,\\n      keepCharPositions = config.keepCharPositions;\\n  var suppressGuide = guide === false && previousConformedValue !== undefined;\\n  var rawValueLength = rawValue.length;\\n  var previousConformedValueLength = previousConformedValue.length;\\n  var placeholderLength = placeholder.length;\\n  var maskLength = mask.length;\\n  var editDistance = rawValueLength - previousConformedValueLength;\\n  var isAddition = editDistance > 0;\\n  var indexOfFirstChange = currentCaretPosition + (isAddition ? -editDistance : 0);\\n  var indexOfLastChange = indexOfFirstChange + Math.abs(editDistance);\\n\\n  if (keepCharPositions === true && !isAddition) {\\n    var compensatingPlaceholderChars = emptyString;\\n\\n    for (var i = indexOfFirstChange; i < indexOfLastChange; i++) {\\n      if (placeholder[i] === placeholderChar$1) {\\n        compensatingPlaceholderChars += placeholderChar$1;\\n      }\\n    }\\n\\n    rawValue = rawValue.slice(0, indexOfFirstChange) + compensatingPlaceholderChars + rawValue.slice(indexOfFirstChange, rawValueLength);\\n  }\\n\\n  var rawValueArr = rawValue.split(emptyString).map(function (char, i) {\\n    return {\\n      char: char,\\n      isNew: i >= indexOfFirstChange && i < indexOfLastChange\\n    };\\n  });\\n\\n  for (var _i = rawValueLength - 1; _i >= 0; _i--) {\\n    var char = rawValueArr[_i].char;\\n\\n    if (char !== placeholderChar$1) {\\n      var shouldOffset = _i >= indexOfFirstChange && previousConformedValueLength === maskLength;\\n\\n      if (char === placeholder[shouldOffset ? _i - editDistance : _i]) {\\n        rawValueArr.splice(_i, 1);\\n      }\\n    }\\n  }\\n\\n  var conformedValue = emptyString;\\n  var someCharsRejected = false;\\n\\n  placeholderLoop: for (var _i2 = 0; _i2 < placeholderLength; _i2++) {\\n    var charInPlaceholder = placeholder[_i2];\\n\\n    if (charInPlaceholder === placeholderChar$1) {\\n      if (rawValueArr.length > 0) {\\n        while (rawValueArr.length > 0) {\\n          var _rawValueArr$shift = rawValueArr.shift(),\\n              rawValueChar = _rawValueArr$shift.char,\\n              isNew = _rawValueArr$shift.isNew;\\n\\n          if (rawValueChar === placeholderChar$1 && suppressGuide !== true) {\\n            conformedValue += placeholderChar$1;\\n            continue placeholderLoop;\\n          } else if (mask[_i2].test(rawValueChar)) {\\n            if (keepCharPositions !== true || isNew === false || previousConformedValue === emptyString || guide === false || !isAddition) {\\n              conformedValue += rawValueChar;\\n            } else {\\n              var rawValueArrLength = rawValueArr.length;\\n              var indexOfNextAvailablePlaceholderChar = null;\\n\\n              for (var _i3 = 0; _i3 < rawValueArrLength; _i3++) {\\n                var charData = rawValueArr[_i3];\\n\\n                if (charData.char !== placeholderChar$1 && charData.isNew === false) {\\n                  break;\\n                }\\n\\n                if (charData.char === placeholderChar$1) {\\n                  indexOfNextAvailablePlaceholderChar = _i3;\\n                  break;\\n                }\\n              }\\n\\n              if (indexOfNextAvailablePlaceholderChar !== null) {\\n                conformedValue += rawValueChar;\\n                rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1);\\n              } else {\\n                _i2--;\\n              }\\n            }\\n\\n            continue placeholderLoop;\\n          } else {\\n            someCharsRejected = true;\\n          }\\n        }\\n      }\\n\\n      if (suppressGuide === false) {\\n        conformedValue += placeholder.substr(_i2, placeholderLength);\\n      }\\n\\n      break;\\n    } else {\\n      conformedValue += charInPlaceholder;\\n    }\\n  }\\n\\n  if (suppressGuide && isAddition === false) {\\n    var indexOfLastFilledPlaceholderChar = null;\\n\\n    for (var _i4 = 0; _i4 < conformedValue.length; _i4++) {\\n      if (placeholder[_i4] === placeholderChar$1) {\\n        indexOfLastFilledPlaceholderChar = _i4;\\n      }\\n    }\\n\\n    if (indexOfLastFilledPlaceholderChar !== null) {\\n      conformedValue = conformedValue.substr(0, indexOfLastFilledPlaceholderChar + 1);\\n    } else {\\n      conformedValue = emptyString;\\n    }\\n  }\\n\\n  return {\\n    conformedValue: conformedValue,\\n    meta: {\\n      someCharsRejected: someCharsRejected\\n    }\\n  };\\n}\\n\\nvar NEXT_CHAR_OPTIONAL = {\\n  __nextCharOptional__: true\\n};\\nvar defaultMaskReplacers = {\\n  '#': /\\\\d/,\\n  A: /[a-z]/i,\\n  N: /[a-z0-9]/i,\\n  '?': NEXT_CHAR_OPTIONAL,\\n  X: /./\\n};\\n\\nvar stringToRegexp = function stringToRegexp(str) {\\n  var lastSlash = str.lastIndexOf('/');\\n  return new RegExp(str.slice(1, lastSlash), str.slice(lastSlash + 1));\\n};\\n\\nvar makeRegexpOptional = function makeRegexpOptional(charRegexp) {\\n  return stringToRegexp(charRegexp.toString().replace(/.(\\\\/)[gmiyus]{0,6}$/, function (match) {\\n    return match.replace('/', '?/');\\n  }));\\n};\\n\\nvar escapeIfNeeded = function escapeIfNeeded(char) {\\n  return '[\\\\\\\\^$.|?*+()'.indexOf(char) > -1 ? \\\"\\\\\\\\\\\".concat(char) : char;\\n};\\n\\nvar charRegexp = function charRegexp(char) {\\n  return new RegExp(\\\"/[\\\".concat(escapeIfNeeded(char), \\\"]/\\\"));\\n};\\n\\nvar isRegexp$1 = function isRegexp(entity) {\\n  return entity instanceof RegExp;\\n};\\n\\nvar castToRegexp = function castToRegexp(char) {\\n  return isRegexp$1(char) ? char : charRegexp(char);\\n};\\n\\nfunction maskToRegExpMask(mask) {\\n  var maskReplacers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMaskReplacers;\\n  return mask.map(function (char, index, array) {\\n    var maskChar = maskReplacers[char] || char;\\n    var previousChar = array[index - 1];\\n    var previousMaskChar = maskReplacers[previousChar] || previousChar;\\n\\n    if (maskChar === NEXT_CHAR_OPTIONAL) {\\n      return null;\\n    }\\n\\n    if (previousMaskChar === NEXT_CHAR_OPTIONAL) {\\n      return makeRegexpOptional(castToRegexp(maskChar));\\n    }\\n\\n    return maskChar;\\n  }).filter(Boolean);\\n}\\n\\nfunction stringMaskToRegExpMask(stringMask) {\\n  var maskReplacers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMaskReplacers;\\n  return maskToRegExpMask(stringMask.split(''), maskReplacers);\\n}\\nfunction arrayMaskToRegExpMask(arrayMask) {\\n  var maskReplacers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMaskReplacers;\\n  var flattenedMask = arrayMask.map(function (part) {\\n    if (part instanceof RegExp) {\\n      return part;\\n    }\\n\\n    if (typeof part === 'string') {\\n      return part.split('');\\n    }\\n\\n    return null;\\n  }).filter(Boolean).reduce(function (mask, part) {\\n    return mask.concat(part);\\n  }, []);\\n  return maskToRegExpMask(flattenedMask, maskReplacers);\\n}\\n\\nvar trigger = function trigger(el, type) {\\n  var e = document.createEvent('HTMLEvents');\\n  e.initEvent(type, true, true);\\n  el.dispatchEvent(e);\\n};\\nvar queryInputElementInside = function queryInputElementInside(el) {\\n  return el instanceof HTMLInputElement ? el : el.querySelector('input') || el;\\n};\\nvar isFunction = function isFunction(val) {\\n  return typeof val === 'function';\\n};\\nvar isString = function isString(val) {\\n  return typeof val === 'string';\\n};\\nvar isRegexp = function isRegexp(val) {\\n  return val instanceof RegExp;\\n};\\n\\nfunction parseMask(inputMask, maskReplacers) {\\n  if (Array.isArray(inputMask)) {\\n    return arrayMaskToRegExpMask(inputMask, maskReplacers);\\n  }\\n\\n  if (isFunction(inputMask)) {\\n    return inputMask;\\n  }\\n\\n  if (isString(inputMask) && inputMask.length > 0) {\\n    return stringMaskToRegExpMask(inputMask, maskReplacers);\\n  }\\n\\n  return inputMask;\\n}\\n\\nfunction createOptions() {\\n  var elementOptions = new Map();\\n  var defaultOptions = {\\n    previousValue: '',\\n    mask: []\\n  };\\n\\n  function get(el) {\\n    return elementOptions.get(el) || _objectSpread2({}, defaultOptions);\\n  }\\n\\n  function partiallyUpdate(el, newOptions) {\\n    elementOptions.set(el, _objectSpread2(_objectSpread2({}, get(el)), newOptions));\\n  }\\n\\n  function remove(el) {\\n    elementOptions.delete(el);\\n  }\\n\\n  return {\\n    partiallyUpdate: partiallyUpdate,\\n    remove: remove,\\n    get: get\\n  };\\n}\\n\\nfunction extendMaskReplacers(maskReplacers) {\\n  var baseMaskReplacers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMaskReplacers;\\n\\n  if (maskReplacers === null || Array.isArray(maskReplacers) || _typeof(maskReplacers) !== 'object') {\\n    return baseMaskReplacers;\\n  }\\n\\n  return Object.keys(maskReplacers).reduce(function (extendedMaskReplacers, key) {\\n    var value = maskReplacers[key];\\n\\n    if (value !== null && !(value instanceof RegExp)) {\\n      return extendedMaskReplacers;\\n    }\\n\\n    return _objectSpread2(_objectSpread2({}, extendedMaskReplacers), {}, _defineProperty({}, key, value));\\n  }, baseMaskReplacers);\\n}\\n\\nvar options = createOptions();\\n\\nfunction triggerInputUpdate(el) {\\n  trigger(el, 'input');\\n}\\n\\nfunction updateValue(el) {\\n  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\\n  var value = el.value;\\n\\n  var _options$get = options.get(el),\\n      previousValue = _options$get.previousValue,\\n      mask = _options$get.mask;\\n\\n  var isValueChanged = value !== previousValue;\\n  var isLengthIncreased = value.length > previousValue.length;\\n  var isUpdateNeeded = value && isValueChanged && isLengthIncreased;\\n\\n  if ((force || isUpdateNeeded) && mask) {\\n    var _conformToMask = conformToMask(value, mask, {\\n      guide: false\\n    }),\\n        conformedValue = _conformToMask.conformedValue;\\n\\n    el.value = conformedValue;\\n    triggerInputUpdate(el);\\n  }\\n\\n  options.partiallyUpdate(el, {\\n    previousValue: value\\n  });\\n}\\n\\nfunction updateMask(el, inputMask, maskReplacers) {\\n  var mask = parseMask(inputMask, maskReplacers);\\n  options.partiallyUpdate(el, {\\n    mask: mask\\n  });\\n}\\n\\nfunction maskToString(mask) {\\n  var maskArray = Array.isArray(mask) ? mask : [mask];\\n  var filteredMaskArray = maskArray.filter(function (part) {\\n    return isString(part) || isRegexp(part);\\n  });\\n  return filteredMaskArray.toString();\\n}\\n\\nfunction createDirective() {\\n  var directiveOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n  var instanceMaskReplacers = extendMaskReplacers(directiveOptions && directiveOptions.placeholders);\\n  return {\\n    bind: function bind(el, _ref) {\\n      var value = _ref.value;\\n      el = queryInputElementInside(el);\\n      updateMask(el, value, instanceMaskReplacers);\\n      updateValue(el);\\n    },\\n    componentUpdated: function componentUpdated(el, _ref2) {\\n      var value = _ref2.value,\\n          oldValue = _ref2.oldValue;\\n      el = queryInputElementInside(el);\\n      var isMaskChanged = isFunction(value) || maskToString(oldValue) !== maskToString(value);\\n\\n      if (isMaskChanged) {\\n        updateMask(el, value, instanceMaskReplacers);\\n      }\\n\\n      updateValue(el, isMaskChanged);\\n    },\\n    unbind: function unbind(el) {\\n      el = queryInputElementInside(el);\\n      options.remove(el);\\n    }\\n  };\\n}\\nvar directive = createDirective();\\n\\nfunction createFilter() {\\n  var filterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n  var instanceMaskReplacers = extendMaskReplacers(filterOptions && filterOptions.placeholders);\\n  return function (value, inputMask) {\\n    if (!isString(value) && !Number.isFinite(value)) return value;\\n    var mask = parseMask(inputMask, instanceMaskReplacers);\\n\\n    var _conformToMask = conformToMask(\\\"\\\".concat(value), mask, {\\n      guide: false\\n    }),\\n        conformedValue = _conformToMask.conformedValue;\\n\\n    return conformedValue;\\n  };\\n}\\nvar filter = createFilter();\\n\\nvar plugin = (function (Vue) {\\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  Vue.directive('mask', createDirective(options));\\n  Vue.filter('VMask', createFilter(options));\\n});\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./node_modules/v-mask/dist/v-mask.esm.js\\n\")}}]);","extractedComments":[]}